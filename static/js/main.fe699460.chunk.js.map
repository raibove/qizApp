{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["GetAnswer","props","state","data","arr","final","answers","this","optns","options","optn","Object","values","map","ans","item","push","i","length","ansfinal","key","className","console","log","React","Component","Answer","activeButton","checkAnswer","bind","setState","prevState","keys","index","style","backgroundColor","some","val","onClick","Question","nextProps","description","App","loading","inrange","displayAnswer","nextQuestion","fetch","response","json","window","location","reload","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fe699460.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n// This Class component is used to show the correct answer\nclass GetAnswer extends React.Component\n{\n constructor(props){\n   super(props);\n   this.state = {data:this.props.data}\n  }\n render(){\n   const arr=[];  // arr array is used to storeindex of correct answer \n   const final =[]  //It is used to store value of corect answer\n    const answers=this.state.data.answers;\n    const optns = this.state.data.options;\n\n    /*\n      Object.values(object_name) gives array of values of given object. Here it will be of form array of array.       \n    */\n    const optn = Object.values(optns);\n\n    // Here we implement the logic to store correct ans index in arr. Since answers is of form array of array\n    // we use nested maps.\n    answers.map((ans)=>{\n      ans.map((item)=>{  \n        arr.push(item)\n      })\n    });\n\n    //Store correct answer value in final array\n    for(var i=0;i<arr.length;i++){\n          final.push(optn[i][arr[i]]);\n    }\n      \n      const ansfinal = final.map((ans)=>{\n        return <div key={ans}>\n          <div className=\"ans\">{ans}</div>\n        </div>\n      })\n\n      return <div className=\"showAnswer\">\n              <div>Answers:</div>\n              {console.log(arr)}\n              {console.log(final)}\n              {ansfinal}\n            </div>\n }\n}\n/*\nWe use ActiveButton array to store the value of active button, i.e button clicked by the user so that we can change its \ncolor. In checkAnswer function we add that item clicked to activeButton.\nactiveButton.some(val => val === item ) is used to check if one of the value in array is equal to that of item.\n*/\nclass Answer extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={data:this.props.data,activeButton:[]}\n    this.checkAnswer = this.checkAnswer.bind(this);\n  }\n\n  checkAnswer(item){\n    this.setState(prevState=>({activeButton: [...prevState.activeButton , item.item]}));\n    console.log(item.item,typeof(item),this.state.activeButton);\n  }\n\n  render(){\n    const optns = this.state.data.options;\n    return(\n    <div>\n      {Object.keys(optns).map((optn) => {\n          return <div key={optn}>\n            {\n              optns[optn].map((item,index)=>{\n                  return <button className=\"optn-button\" style={{backgroundColor: this.state.activeButton.some(val => val === item ) ? 'red':'blue'}} key={index}\n                   onClick={()=> {\n                    this.checkAnswer({item});\n                    console.log(item);\n                  }\n                }>{item}</button>\n              })\n            }\n          </div>\n        })}\n    </div>\n    )\n  }\n}\n\nclass Question extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {data : this.props.data}\n  }\n  componentDidUpdate(nextProps) {\n    // You don't have to do this check first, but it can help prevent an unneeded render\n    if (nextProps.data !== this.state.data) {\n      this.setState({ data: nextProps.data });\n    }\n  }\n  render(){\n  return(\n        <div className=\"question\">{this.state.data.description}</div>\n        )}\n}\n\nclass App extends React.Component {\n  data = '';\n  //index=0\n  constructor(props){\n    super(props);\n    this.state={data:'',loading:true,index:0,inrange:true,displayAnswer:false}\n    this.nextQuestion = this.nextQuestion.bind(this);\n    }\n   nextQuestion(){\n     {if(this.state.index <=8){\n      this.setState((state)=>{return {index : state.index +1}},()=>{ this.setState({loading:false,data:this.data.data[this.state.index]}); {console.log(\"new:\"+this.state.index)} })\n      this.setState({loading:true,displayAnswer:false}); \n      {console.log(this.state.data)}\n      {console.log(this.state.index)}\n     }\n     else{\n       this.setState({inrange:false});\n     }\n    } \n  }\n \n async componentDidMount(){\n   try{\n   const response = await fetch(\"https://gre-verbal.p.rapidapi.com/api/v1/questions?subcat=TC&count=10\", {\n    \"method\": \"GET\",\n    \"headers\": {\n      \"x-rapidapi-host\": \"gre-verbal.p.rapidapi.com\",\n      \"x-rapidapi-key\": \"16f155a489msh85c629274b6b403p1b5f38jsn77f376c963aa\"\n    }\n  })\n  this.data = await response.json();\n  console.log(this.data);\n  this.setState({loading:false, data:this.data.data[this.state.index],displayAnswer:false})\n}\ncatch(err){\n  throw err;\n}\n }\n  render(){  \n    return (<div>\n      {this.state.loading?<div>Loading</div> : this.state.inrange?<div className=\"App\">{this.state.index+1}<Question data={this.state.data}/><Answer data={this.state.data}/><button className=\"getAnswer\" onClick={()=>{console.log(\"button clicked\");this.setState({displayAnswer:true});}}>Get Answer</button><button className=\"next\" onClick={this.nextQuestion}>Next</button></div> :  <button className=\"playAgain\" onClick={ ()=>window.location.reload(false)}>Play Again</button> }\n     {this.state.displayAnswer? <GetAnswer data={this.state.data}/>:console.log(\"waiting\")}\n      </div>\n      );\n}\n}\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}